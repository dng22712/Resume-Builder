"""
Django settings for careersparker project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
import sys
from datetime import timedelta
from pathlib import Path

import dotenv

from careersparker.middleware import RedirectUnauthenticatedSwaggerToLoginMiddleware
from user import user_profile
from util.test_utils.runner import PostgresSchemaTestRunner

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Determine whether we are running in production or development
# if os.environ.get('DJANGO_ENVIRONMENT') == 'dev':
#     print('development')
#     # noinspection PyUnresolvedReferences
#     dotenv_file = os.path.join(BASE_DIR, '.env_dev')
#
# elif os.environ.get('DJANGO_ENVIRONMENT') == 'prod':
#     print('production')
#     # noinspection PyUnresolvedReferences
#     dotenv_file = os.path.join(BASE_DIR, '.env_prod')
#
# else:
#     print('local')
#     dotenv_file = os.path.join(BASE_DIR, '.env_local')

DJANGO_ENV = os.environ.get('DJANGO_ENVIRONMENT', 'local')
print(DJANGO_ENV)
dotenv_file = os.path.join(BASE_DIR, f'.env_{DJANGO_ENV}')

# Load operating system environment variables and then prepare to use them
if os.path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = {
    'local': ['127.0.0.1', 'localhost', 'cobra-neat-regularly.ngrok-free.app'],
    'dev': ['cvr-devbox.careersparker.com', '13.42.174.71'],
    'prod': ['cvr-prodbox.careersparker.com']
}[DJANGO_ENV]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    # 'user.apps.UserConfig',

    # swagger
    'drf_spectacular',

    # Apps
    'user',
    'user.user_profile',
    'fixed_payments',
    'cvbuilder',
    'cvbuilder.employment_history',
    'cvbuilder.education',
    'cvbuilder.skill',
    'cvbuilder.award',
    'cvbuilder.certificate',
    'cvbuilder.publication',
    'cvbuilder.achievement',
    'cvbuilder.hobby',
    'cvbuilder.reference',
    'cvbuilder.internship',
    'cvbuilder.course',
    'cvbuilder.language',
    'cvbuilder.volunteering',
    'cvbuilder.social_media',
    'cvbuilder.strength',
    'cvbuilder.custom_section',
    'cvbuilder.graph',
    'cvbuilder.text',
    'cvbuilder.cv_template_list',
    'cvbuilder.cv_template',
    'subscription_payments',

    # CORS
    'corsheaders',

    # user agents
    'django_user_agents',
    # s3 bucket
    'storages',
    # django social auth
    'social_django',

    # 'ckeditor',  # cke editor
    'django_ckeditor_5',

    # redis
    'django_redis',

]

MIDDLEWARE = [
    # cors origin
    'corsheaders.middleware.CorsMiddleware',
    # default
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',  # python-social-auth
    'careersparker.middleware.RedirectUnauthenticatedSwaggerToLoginMiddleware',
]

USER_AGENTS_CACHE = 'default'
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 31536000  # Set the duration in seconds (e.g., 1 year)

CORS_ALLOW_METHODS = ('DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT',)
CORS_ALLOW_HEADERS = (
    'accept', 'accept-encoding', 'authorization, content-type', 'dnt', 'origin', 'user-agent', 'x-csrftoken',
    'x-requested-with')

CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000',
    'http://127.0.0.1:8000',
    'https://dng3t96g6sv58.cloudfront.net',
    'https://13.42.174.71',
    'https://cvr-devbox.careersparker.com',
    'https://potential-train-g6qrw7pj4wgfw5gq-3000.app.github.dev/',
    'https://cobra-neat-regularly.ngrok-free.app',  # ngrok
    'https://cvr-frontend.careersparker.com',
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'https://dng3t96g6sv58.cloudfront.net',
    'https://13.42.174.71',
    'https://cvr-devbox.careersparker.com',
    'https://cobra-neat-regularly.ngrok-free.app',  # ngrok
    'https://potential-train-g6qrw7pj4wgfw5gq-3000.app.github.dev',
    'https://cvr-frontend.careersparker.com',
]

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'https://dng3t96g6sv58.cloudfront.net',
    'https://13.42.174.71',
    'https://cvr-devbox.careersparker.com',
    'https://cobra-neat-regularly.ngrok-free.app',  # ngrok
]

ROOT_URLCONF = 'careersparker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'careersparker.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DATABASE_NAME'),
        'USER': os.environ.get('DATABASE_USER'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
        'HOST': os.environ.get('DATABASE_HOST'),
        'PORT': os.environ.get('DATABASE_PORT'),
        'TEST': {
            'ENGINE': 'django.db.backends.sqlite3',
            # 'NAME': ':cvr-db-test:',  # Use in-memory database for testing
            'NAME': os.environ.get('TEST_DATABASE_NAME'),
        }

    },
}
# Environment-specific settings
if os.environ.get('DJANGO_ENVIRONMENT') == 'local':
    DATABASES['default']['OPTIONS'] = {
        'options': '-c search_path=careersparker-django-local,public'
    }

elif os.environ.get('DJANGO_ENVIRONMENT') == 'dev':
    DATABASES['default']['OPTIONS'] = {
        'options': '-c search_path=cvr-db-preprod'
    }

elif os.environ.get('DJANGO_ENVIRONMENT') == 'prod':
    DATABASES['default']['OPTIONS'] = {
        'options': '-c search_path=cvr-db-prod'
    }

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_LIMIT_OFFSET_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.registration_authentication.TokenAuthentication',

    ),
}

AUTH_USER_MODEL = 'user.User'
# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Simple jwt
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# AWS Configuration
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')

# AWS SES Configuration
AWS_SES_REGION_NAME = os.environ.get('AWS_SES_REGION_NAME')
AWS_SES_REGION_ENDPOINT = os.environ.get('AWS_SES_REGION_ENDPOINT')
DEFAULT_FROM = os.getenv('DEFAULT_FROM')
DEFAULT_REPLY_TO = os.getenv('DEFAULT_REPLY_TO')
# SES Email Settings
EMAIL_BACKEND = 'django_ses.SESBackend'

# AWS S3 Configuration
# Default file storage mechanism that holds old data media.
AWS_LOCATION = 'static'
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')
STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Define local file paths
PROFILE_IMAGE_LOCAL_PATH = os.path.join(BASE_DIR, 'static/public/user_profile_image.png')

SPECTACULAR_SETTINGS = {
    'TITLE': 'CGAfrica API',
    'DESCRIPTION': 'This is the API documentation API for CGAfrica',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': r'/api/v[0-9]',
    'COMPONENT_SPLIT_REQUEST': True,
    'COLLAPSE_FOR_PATHS': True,
    'COLLAPSE_FOR_METHODS': True,

    'SERVERS': [
        {
            'url': 'http://localhost:8000',
            'description': 'Local development server',
        },
        {
            'url': 'https://cvr-devbox.careersparker.com',
            'description': 'Pre-production server',
        },

    ],

    'TAGS': [

        # User
        {'name': 'User', 'description': 'User-related endpoints'},
        # User Profile
        {'name': 'User Profile', 'description': 'User profile-related endpoints'},

        # Payment
        {'name': 'Payment', 'description': 'Payment-related endpoints'},
        # Fixed Payment
        {'name': 'Payments: Fixed Payment', 'description': 'Fixed Payment-related endpoints'},
        # Subscription
        {'name': 'Payments: Subscription', 'description': 'Subscription-related endpoints'},

        # Cv Template List
        {'name': 'CV Template List', 'description': 'Cv Template List-related endpoints'},

        # CV Builder
        {'name': 'CV', 'description': 'CV Builder-related endpoints'},
        # Employment History
        {'name': 'CV: Employment History', 'description': 'Employment History-related endpoints'},
        # Employment Education
        {'name': 'CV: Education', 'description': 'Education-related endpoints'},
        # Employment Skill
        {'name': 'CV: Skill', 'description': 'Skill-related endpoints'},
        # Award
        {'name': 'CV: Award', 'description': 'Award-related endpoints'},
        # Certificate
        {'name': 'CV: Certificate', 'description': 'Certificate-related endpoints'},
        # Publication
        {'name': 'CV: Publication', 'description': 'Publication-related endpoints'},
        # Achievement
        {'name': 'CV: Achievement', 'description': 'Achievement-related endpoints'},
        # Hobby
        {'name': 'CV: Hobby', 'description': 'Hobby-related endpoints'},
        # Reference
        {'name': 'CV: Reference', 'description': 'Reference-related endpoints'},
        # Internship
        {'name': 'CV: Internship', 'description': 'Internship-related endpoints'},
        # Course
        {'name': 'CV: Course', 'description': 'Course-related endpoints'},
        # Language
        {'name': 'CV: Language', 'description': 'Language-related endpoints'},
        # Volunteering
        {'name': 'CV: Volunteering', 'description': 'Volunteering-related endpoints'},
        # Social Media
        {'name': 'CV: Social Media', 'description': 'Social Media-related endpoints'},
        # Strength
        {'name': 'CV: Strength', 'description': 'Strength-related endpoints'},
        # Custom Section
        {'name': 'CV: Custom Section', 'description': 'Custom Section-related endpoints'},
        # Graph
        {'name': 'CV: Graph', 'description': 'Graph-related endpoints'},
        # Text Section
        {'name': 'CV: Text Section', 'description': 'Text Section-related endpoints'},
        # CV Template
        {'name': 'CV: Template', 'description': 'CV Template-related endpoints'},
        # CV Template list
        {'name': 'CV: Template List', 'description': 'CV Template List-related endpoints'}
    ],

    # add the following line ###
    'SWAGGER_UI_SETTINGS': {
        'docExpansion': 'none',
        'deepLinking': True,

    },
}
